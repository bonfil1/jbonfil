/* Welcome to Compass.
 * In this file you should write your main styles. (or centralize your imports)
 * Import this file using the following HTML or equivalent:
 * <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css" /> */
/* Changing Susy default global settings */
/*
 *  Custom styles
 */
/*
 *  Jose Angel Bonfil Evia
 *  This my website developed by myself :)
 */
*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  color: #fff; }

body {
  margin: 0;
  padding: 0;
  background-color: #e47a08;
  font-family: "Helvetica Neue", helvetica, Arial, sans-serif; }
  body .wrapper div.section.item {
    padding: 40px 60px 60px 60px; }
    body .wrapper div.section.item.begining {
      font-size: 1.8em; }
    body .wrapper div.section.item h1 {
      color: #000;
      border-bottom: 2px solid #000; }
  body a:hover, body a:link, body a:visited {
    text-decoration: none; }
  body #fp-nav ul li a span,
  body .fp-slidesNav ul li a span {
    background: white;
    width: 8px;
    height: 8px;
    margin: -4px 0 0 -4px; }
  body #fp-nav ul li a.active span,
  body .fp-slidesNav ul li a.active span,
  body #fp-nav ul li:hover a.active span,
  body .fp-slidesNav ul li:hover a.active span {
    width: 16px;
    height: 16px;
    margin: -8px 0 0 -8px;
    background: transparent;
    box-sizing: border-box;
    border: 1px solid #24221F; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
